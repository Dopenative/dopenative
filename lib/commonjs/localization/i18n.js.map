{"version":3,"sources":["i18n.js"],"names":["TranslationContext","React","createContext","TranslationProvider","children","translations","locale","setLocale","Localization","console","log","i18n","fallbacks","I18nManager","forceRTL","isRTL","localized","key","config","t","includes","getLocale","localeJSON","Storage","getItem","setItem","value","setAppLocale"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEO,MAAMA,kBAAkB,gBAAGC,eAAMC,aAAN,CAAoB,EAApB,CAA3B;;;;AAEA,MAAMC,mBAAmB,GAAG,QAAgC;AAAA,MAA/B;AAAEC,IAAAA,QAAF;AAAYC,IAAAA;AAAZ,GAA+B;AACjE,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsB,qBAASC,YAAY,CAACF,MAAtB,CAA5B;AAEAG,EAAAA,OAAO,CAACC,GAAR,CAAY,yBAAZ;AACAD,EAAAA,OAAO,CAACC,GAAR,CAAa,iBAAgBF,YAAY,CAACF,MAAO,GAAjD;AACAG,EAAAA,OAAO,CAACC,GAAR,CAAa,mBAAkBJ,MAAO,GAAtC;AAEAK,kBAAKL,MAAL,GAAcA,MAAd;AACAK,kBAAKN,YAAL,GAAoBA,YAApB;AACAM,kBAAKC,SAAL,GAAiB,IAAjB,CATiE,CAUjE;;AACAC,2BAAYC,QAAZ,CAAqBN,YAAY,CAACO,KAAlC;;AAEA,QAAMC,SAAS,GAAG,wBAChB,CAACC,GAAD,EAAMC,MAAN,KACEP,gBAAKQ,CAAL,CAAOF,GAAP,EAAY,EAAE,GAAGC,MAAL;AAAaZ,IAAAA;AAAb,GAAZ,EAAmCc,QAAnC,CAA4C,SAA5C,IACIH,GADJ,GAEIN,gBAAKQ,CAAL,CAAOF,GAAP,EAAY,EAAE,GAAGC,MAAL;AAAaZ,IAAAA;AAAb,GAAZ,CAJU,EAKhB,CAACA,MAAD,CALgB,CAAlB;AAQA,QAAMe,SAAS,GAAG,wBAAY,YAAY;AACxC,UAAMC,UAAU,GAAG,MAAMC,sBAAQC,OAAR,CAAgB,QAAhB,CAAzB;AACAf,IAAAA,OAAO,CAACC,GAAR,CACG,wDAAuDY,UAAW,EADrE,EAFwC,CAMxC;;AACAf,IAAAA,SAAS,CAACe,UAAU,KAAK,IAAf,GAAsBA,UAAtB,GAAmCd,YAAY,CAACF,MAAjD,CAAT;AACD,GARiB,EAQf,CAACC,SAAD,CARe,CAAlB;AAUA,wBAAU,MAAM;AACdc,IAAAA,SAAS;AACV,GAFD,EAEG,CAACA,SAAD,CAFH;AAIA,wBAAU,MAAM;AACdZ,IAAAA,OAAO,CAACC,GAAR,CAAa,4BAA2BJ,MAAO,EAA/C;;AACAiB,0BAAQE,OAAR,CAAgB,QAAhB,EAA0BnB,MAA1B;AACD,GAHD,EAGG,CAACA,MAAD,CAHH;AAKA,QAAMoB,KAAK,GAAG;AACZV,IAAAA,SADY;AAEZW,IAAAA,YAAY,EAAEpB;AAFF,GAAd;AAKA,sBACE,6BAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAEmB;AAApC,KACGtB,QADH,CADF;AAKD,CAlDM","sourcesContent":["import React, { useCallback, useEffect, useState } from 'react'\nimport { I18nManager } from 'react-native'\nimport Storage from '@react-native-async-storage/async-storage'\nimport i18n from 'i18n-js'\nimport * as Localization from 'expo-localization'\n\nexport const TranslationContext = React.createContext({})\n\nexport const TranslationProvider = ({ children, translations }) => {\n  const [locale, setLocale] = useState(Localization.locale)\n\n  console.log('setting up translations')\n  console.log(`local locale: ${Localization.locale} `)\n  console.log(`default locale: ${locale} `)\n\n  i18n.locale = locale\n  i18n.translations = translations\n  i18n.fallbacks = true\n  // update layout direction\n  I18nManager.forceRTL(Localization.isRTL)\n\n  const localized = useCallback(\n    (key, config) =>\n      i18n.t(key, { ...config, locale }).includes('missing')\n        ? key\n        : i18n.t(key, { ...config, locale }),\n    [locale],\n  )\n\n  const getLocale = useCallback(async () => {\n    const localeJSON = await Storage.getItem('locale')\n    console.log(\n      `getting locale from storage and writing it to memory ${localeJSON}`,\n    )\n\n    // If we have a locale stored in local storage, that is high priority (it overrides the current device locale)\n    setLocale(localeJSON !== null ? localeJSON : Localization.locale)\n  }, [setLocale])\n\n  useEffect(() => {\n    getLocale()\n  }, [getLocale])\n\n  useEffect(() => {\n    console.log(`write to storage locale: ${locale}`)\n    Storage.setItem('locale', locale)\n  }, [locale])\n\n  const value = {\n    localized,\n    setAppLocale: setLocale,\n  }\n\n  return (\n    <TranslationContext.Provider value={value}>\n      {children}\n    </TranslationContext.Provider>\n  )\n}\n"]}