{"version":3,"sources":["DNTextInput.jsx"],"names":["DNTextInput","props","style","capitalized","value","onChange","keyboardType","placeholder","password","styles","spacingStyles","textStyles","textInput","console","log","dynamicStyles"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,WAAW,GAAGC,KAAK,IAAI;AAC3B,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,WAFI;AAGJC,IAAAA,KAHI;AAIJC,IAAAA,QAJI;AAKJC,IAAAA,YALI;AAMJC,IAAAA,WANI;AAOJC,IAAAA,QAPI;AAQJC,IAAAA;AARI,MASFR,KATJ;AAWA,QAAMS,aAAa,GAAG,4BAAWT,KAAX,CAAtB;AAEA,QAAMU,UAAU,GAAG,CAACF,MAAM,CAACG,SAAR,EAAmB,GAAGF,aAAtB,EAAqCR,KAArC,CAAnB;AAEAW,EAAAA,OAAO,CAACC,GAAR,CAAYH,UAAZ;;AAEA,MAAIH,QAAJ,EAAc;AACZ,wBACE,6BAAC,sBAAD;AACE,MAAA,KAAK,EAAEG,UADT;AAEE,MAAA,WAAW,EAAEJ,WAFf;AAGE,MAAA,YAAY,EAAED,YAHhB;AAIE,MAAA,oBAAoB,EAAC,SAJvB;AAKE,MAAA,YAAY,EAAED,QALhB;AAME,MAAA,KAAK,EAAED,KANT;AAOE,MAAA,qBAAqB,EAAC,aAPxB;AAQE,MAAA,cAAc,EAAED,WAAW,GAAG,OAAH,GAAa,MAR1C;AASE,MAAA,eAAe;AATjB,MADF;AAaD;;AAED,sBACE,6BAAC,sBAAD;AACE,IAAA,KAAK,EAAEQ,UADT;AAEE,IAAA,WAAW,EAAEJ,WAFf;AAGE,IAAA,YAAY,EAAED,YAHhB;AAIE,IAAA,oBAAoB,EAAC,SAJvB;AAKE,IAAA,YAAY,EAAED,QALhB;AAME,IAAA,KAAK,EAAED,KANT;AAOE,IAAA,qBAAqB,EAAC,aAPxB;AAQE,IAAA,cAAc,EAAED,WAAW,GAAG,OAAH,GAAa;AAR1C,IADF;AAYD,CA9CD;;4BAgDe,iBAAK,6BAAeH,WAAf,EAA4Be,eAA5B,CAAL,C","sourcesContent":["import React, { memo } from 'react'\nimport { TextInput } from 'react-native'\nimport { useSpacing } from '../../hooks/useSpacing'\nimport { useTrulyNative } from '../../theming'\nimport dynamicStyles from './styles'\n\nconst DNTextInput = props => {\n  const {\n    style,\n    capitalized,\n    value,\n    onChange,\n    keyboardType,\n    placeholder,\n    password,\n    styles,\n  } = props\n\n  const spacingStyles = useSpacing(props)\n\n  const textStyles = [styles.textInput, ...spacingStyles, style]\n\n  console.log(textStyles)\n\n  if (password) {\n    return (\n      <TextInput\n        style={textStyles}\n        placeholder={placeholder}\n        keyboardType={keyboardType}\n        placeholderTextColor=\"#aaaaaa\"\n        onChangeText={onChange}\n        value={value}\n        underlineColorAndroid=\"transparent\"\n        autoCapitalize={capitalized ? 'words' : 'none'}\n        secureTextEntry\n      />\n    )\n  }\n\n  return (\n    <TextInput\n      style={textStyles}\n      placeholder={placeholder}\n      keyboardType={keyboardType}\n      placeholderTextColor=\"#aaaaaa\"\n      onChangeText={onChange}\n      value={value}\n      underlineColorAndroid=\"transparent\"\n      autoCapitalize={capitalized ? 'words' : 'none'}\n    />\n  )\n}\n\nexport default memo(useTrulyNative(DNTextInput, dynamicStyles))\n"]}