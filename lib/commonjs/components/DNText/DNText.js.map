{"version":3,"sources":["DNText.jsx"],"names":["DNText","props","style","children","secondary","h1","h2","h3","uppercase","lowercase","styles","theme","appearance","spacingStyles","textStyles","tnSecondaryText","tnPrimaryText","fontSize","fontSizes","xxl","fontWeight","fontWeights","l","xl","textTransform","dynamicStyles"],"mappings":";;;;;;;AAAA;;AACA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,MAAM,GAAGC,KAAK,IAAI;AACtB,QAAM;AACJC,IAAAA,KADI;AAEJC,IAAAA,QAFI;AAGJC,IAAAA,SAHI;AAIJC,IAAAA,EAJI;AAKJC,IAAAA,EALI;AAMJC,IAAAA,EANI;AAOJC,IAAAA,SAPI;AAQJC,IAAAA,SARI;AASJC,IAAAA,MATI;AAUJC,IAAAA,KAVI;AAWJC,IAAAA;AAXI,MAYFX,KAZJ;AAcA,QAAMY,aAAa,GAAG,4BAAWZ,KAAX,CAAtB;AAEA,QAAMa,UAAU,GAAG,CACjBV,SAAS,GAAGM,MAAM,CAACK,eAAV,GAA4BL,MAAM,CAACM,aAD3B,EAEjBX,EAAE,IAAI;AAAEY,IAAAA,QAAQ,EAAEN,KAAK,CAACO,SAAN,CAAgBC,GAA5B;AAAiCC,IAAAA,UAAU,EAAET,KAAK,CAACU,WAAN,CAAkBC;AAA/D,GAFW,EAGjBhB,EAAE,IAAI;AAAEW,IAAAA,QAAQ,EAAEN,KAAK,CAACO,SAAN,CAAgBK,EAA5B;AAAgCH,IAAAA,UAAU,EAAET,KAAK,CAACU,WAAN,CAAkBC;AAA9D,GAHW,EAIjBf,EAAE,IAAI;AAAEU,IAAAA,QAAQ,EAAEN,KAAK,CAACO,SAAN,CAAgBI,CAA5B;AAA+BF,IAAAA,UAAU,EAAET,KAAK,CAACU,WAAN,CAAkBC;AAA7D,GAJW,EAKjBd,SAAS,IAAI;AAAEgB,IAAAA,aAAa,EAAE;AAAjB,GALI,EAMjBf,SAAS,IAAI;AAAEe,IAAAA,aAAa,EAAE;AAAjB,GANI,EAOjB,GAAGX,aAPc,EAQjBX,KARiB,CAAnB;AAWA,sBAAO,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEY;AAAb,KAA0BX,QAA1B,CAAP;AACD,CA7BD;;4BA+Be,iBAAK,6BAAeH,MAAf,EAAuByB,eAAvB,CAAL,C","sourcesContent":["import React, { memo } from 'react'\nimport { Text } from 'react-native'\nimport { useSpacing } from '../../hooks/useSpacing'\nimport { useTrulyNative } from '../../theming'\nimport dynamicStyles from './styles'\n\nconst DNText = props => {\n  const {\n    style,\n    children,\n    secondary,\n    h1,\n    h2,\n    h3,\n    uppercase,\n    lowercase,\n    styles,\n    theme,\n    appearance,\n  } = props\n\n  const spacingStyles = useSpacing(props)\n\n  const textStyles = [\n    secondary ? styles.tnSecondaryText : styles.tnPrimaryText,\n    h1 && { fontSize: theme.fontSizes.xxl, fontWeight: theme.fontWeights.l },\n    h2 && { fontSize: theme.fontSizes.xl, fontWeight: theme.fontWeights.l },\n    h3 && { fontSize: theme.fontSizes.l, fontWeight: theme.fontWeights.l },\n    uppercase && { textTransform: 'uppercase' },\n    lowercase && { textTransform: 'lowercase' },\n    ...spacingStyles,\n    style,\n  ]\n\n  return <Text style={textStyles}>{children}</Text>\n}\n\nexport default memo(useTrulyNative(DNText, dynamicStyles))\n"]}