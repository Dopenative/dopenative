{"version":3,"sources":["index.jsx"],"names":["DNToastContent","props","containerStyle","textStyle","actionStyle","text","action","onAction","radius","onPress","styles","theme","appearance","spacingStyles","containerStyles","tnToastContainer","borderRadius","tnToastShadow","textStyles","tnToastContent","actionStyles","tnToastPrimaryAction","tnToastInnerContainer","DNToast","Component","myRef","isVisible","setIsVisible","React","useState","show","hide","setTimeout","dynamicStyles"],"mappings":";;;;;;;AAAA;;AAEA;;AACA;;AACA;;AACA;;;;;;;;AAEA,MAAMA,cAAc,GAAGC,KAAK,IAAI;AAC9B,QAAM;AACJC,IAAAA,cADI;AAEJC,IAAAA,SAFI;AAGJC,IAAAA,WAHI;AAIJC,IAAAA,IAJI;AAKJC,IAAAA,MALI;AAMJC,IAAAA,QANI;AAOJC,IAAAA,MAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA,MATI;AAUJC,IAAAA,KAVI;AAWJC,IAAAA;AAXI,MAYFX,KAZJ;AAcA,QAAMY,aAAa,GAAG,4BAAWZ,KAAX,CAAtB;AAEA,QAAMa,eAAe,GAAG,CACtBJ,MAAM,CAACK,gBADe,EAEtBP,MAAM,IAAI;AAAEQ,IAAAA,YAAY,EAAER;AAAhB,GAFY,EAGtBE,MAAM,CAACO,aAHe,EAItB,GAAGJ,aAJmB,EAKtBX,cALsB,CAAxB;AAQA,QAAMgB,UAAU,GAAG,CAACR,MAAM,CAACS,cAAR,EAAwBhB,SAAxB,CAAnB;AAEA,QAAMiB,YAAY,GAAG,CAACV,MAAM,CAACW,oBAAR,EAA8BjB,WAA9B,CAArB;AAEA,sBACE,6BAAC,+BAAD;AAAoB,IAAA,KAAK,EAAEU,eAA3B;AAA4C,IAAA,OAAO,EAAEL;AAArD,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEC,MAAM,CAACY;AAApB,kBACE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEJ;AAAb,KAA0Bb,IAA1B,CADF,eAEE,6BAAC,iBAAD;AAAM,IAAA,KAAK,EAAEe,YAAb;AAA2B,IAAA,OAAO,EAAEb;AAApC,KACGD,MADH,CAFF,CADF,CADF;AAUD,CAvCD;;AAyCA,MAAMiB,OAAO,GAAGC,SAAS,iBACvB,uBAAW,CAACvB,KAAD,EAAQwB,KAAR,KAAkB;AAC3B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BC,eAAMC,QAAN,CAAe,KAAf,CAAlC;;AAEA,kCAAoBJ,KAApB,EAA2B,OAAO;AAChCK,IAAAA,IAAI,EAAE,MAAM;AACVH,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAH+B;AAIhCI,IAAAA,IAAI,EAAE,MAAM;AACVJ,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AAN+B,GAAP,CAA3B;AASA,wBAAU,MAAM;AACd,QAAID,SAAJ,EAAe;AACbM,MAAAA,UAAU,CAAC,MAAM;AACfL,QAAAA,YAAY,CAAC,KAAD,CAAZ;AACD,OAFS,EAEP,IAFO,CAAV;AAGD;AACF,GAND,EAMG,CAACD,SAAD,CANH;;AAQA,MAAI,CAACA,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,sBAAO,6BAAC,SAAD,EAAezB,KAAf,CAAP;AACD,CAxBD,CADF,C,CA0BA;;;eACesB,OAAO,CAAC,6BAAevB,cAAf,EAA+BiC,eAA/B,CAAD,C","sourcesContent":["import React, { forwardRef, useEffect, useImperativeHandle } from 'react'\n\nimport { Text, TouchableHighlight, View } from 'react-native'\nimport { useSpacing } from '../../hooks/useSpacing'\nimport { useTrulyNative } from '../../theming'\nimport dynamicStyles from './styles'\n\nconst DNToastContent = props => {\n  const {\n    containerStyle,\n    textStyle,\n    actionStyle,\n    text,\n    action,\n    onAction,\n    radius,\n    onPress,\n    styles,\n    theme,\n    appearance,\n  } = props\n\n  const spacingStyles = useSpacing(props)\n\n  const containerStyles = [\n    styles.tnToastContainer,\n    radius && { borderRadius: radius },\n    styles.tnToastShadow,\n    ...spacingStyles,\n    containerStyle,\n  ]\n\n  const textStyles = [styles.tnToastContent, textStyle]\n\n  const actionStyles = [styles.tnToastPrimaryAction, actionStyle]\n\n  return (\n    <TouchableHighlight style={containerStyles} onPress={onPress}>\n      <View style={styles.tnToastInnerContainer}>\n        <Text style={textStyles}>{text}</Text>\n        <Text style={actionStyles} onPress={onAction}>\n          {action}\n        </Text>\n      </View>\n    </TouchableHighlight>\n  )\n}\n\nconst DNToast = Component =>\n  forwardRef((props, myRef) => {\n    const [isVisible, setIsVisible] = React.useState(false)\n\n    useImperativeHandle(myRef, () => ({\n      show: () => {\n        setIsVisible(true)\n      },\n      hide: () => {\n        setIsVisible(false)\n      },\n    }))\n\n    useEffect(() => {\n      if (isVisible) {\n        setTimeout(() => {\n          setIsVisible(false)\n        }, 3000)\n      }\n    }, [isVisible])\n\n    if (!isVisible) {\n      return null\n    }\n    return <Component {...props} />\n  })\n// export default useTrulyNative(TNToast, dynamicStyles)\nexport default DNToast(useTrulyNative(DNToastContent, dynamicStyles))\n"]}