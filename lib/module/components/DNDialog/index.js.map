{"version":3,"sources":["index.jsx"],"names":["React","forwardRef","useEffect","useImperativeHandle","Text","TouchableHighlight","View","useSpacing","useTrulyNative","dynamicStyles","DNButton","DNText","DNDialogContent","props","containerStyle","titleStyle","messageStyle","iconStyle","title","message","icon","actions","onClose","styles","theme","appearance","spacingStyles","containerStyles","tnDialogContainer","tnDialogShadow","titleStyles","tnDialogTitle","messageStyles","tnDialogMessage","tnDialogInnerContainer","tnActionsContainer","map","action","index","secondary","onPress","destructive","tnDestructiveButton","tnDestructiveButtonText","DNDialog","Component","myRef","isVisible","setIsVisible","useState","show","hide"],"mappings":"AAAA,OAAOA,KAAP,IAAgBC,UAAhB,EAA4BC,SAA5B,EAAuCC,mBAAvC,QAAkE,OAAlE;AAEA,SAASC,IAAT,EAAeC,kBAAf,EAAmCC,IAAnC,QAA+C,cAA/C;AACA,SAASC,UAAT,QAA2B,wBAA3B;AACA,SAASC,cAAT,QAA+B,eAA/B;AACA,OAAOC,aAAP,MAA0B,UAA1B;AACA,OAAOC,QAAP,MAAqB,aAArB;AACA,SAASC,MAAT,QAAuB,WAAvB;;AAEA,MAAMC,eAAe,GAAGC,KAAK,IAAI;AAC/B,QAAM;AACJC,IAAAA,cADI;AAEJC,IAAAA,UAFI;AAGJC,IAAAA,YAHI;AAIJC,IAAAA,SAJI;AAKJC,IAAAA,KALI;AAMJC,IAAAA,OANI;AAOJC,IAAAA,IAPI;AAQJC,IAAAA,OARI;AASJC,IAAAA,OATI;AAUJC,IAAAA,MAVI;AAWJC,IAAAA,KAXI;AAYJC,IAAAA;AAZI,MAaFZ,KAbJ;AAeA,QAAMa,aAAa,GAAGnB,UAAU,CAACM,KAAD,CAAhC;AAEA,QAAMc,eAAe,GAAG,CACtBJ,MAAM,CAACK,iBADe,EAEtBL,MAAM,CAACM,cAFe,EAGtB,GAAGH,aAHmB,EAItBZ,cAJsB,CAAxB;AAOA,QAAMgB,WAAW,GAAG,CAACP,MAAM,CAACQ,aAAR,EAAuBhB,UAAvB,CAApB;AACA,QAAMiB,aAAa,GAAG,CAACT,MAAM,CAACU,eAAR,EAAyBjB,YAAzB,CAAtB;AAEA,sBACE,oBAAC,kBAAD;AAAoB,IAAA,KAAK,EAAEW;AAA3B,kBACE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEJ,MAAM,CAACW;AAApB,kBACE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEJ,WAAf;AAA4B,IAAA,GAAG;AAA/B,KACGZ,KADH,CADF,eAIE,oBAAC,MAAD;AAAQ,IAAA,KAAK,EAAEc,aAAf;AAA8B,IAAA,GAAG;AAAjC,KACGb,OADH,CAJF,eAOE,oBAAC,IAAD;AAAM,IAAA,KAAK,EAAEI,MAAM,CAACY;AAApB,KACGd,OAAO,CAACe,GAAR,CAAY,CAACC,MAAD,EAASC,KAAT,KAAmB;AAC9B,QAAID,MAAM,CAACE,SAAX,EAAsB;AACpB,0BACE,oBAAC,QAAD;AACE,QAAA,IAAI,EAAEF,MAAM,CAACnB,KADf;AAEE,QAAA,OAAO,EAAEmB,MAAM,CAACG,OAFlB;AAGE,QAAA,SAAS,MAHX;AAIE,QAAA,GAAG,MAJL;AAKE,QAAA,GAAG,MALL;AAME,QAAA,GAAG,MANL;AAOE,QAAA,GAAG,EAAEF;AAPP,QADF;AAWD;;AACD,QAAID,MAAM,CAACI,WAAX,EAAwB;AACtB,0BACE,oBAAC,QAAD;AACE,QAAA,cAAc,EAAElB,MAAM,CAACmB,mBADzB;AAEE,QAAA,SAAS,EAAEnB,MAAM,CAACoB,uBAFpB;AAGE,QAAA,IAAI,EAAEN,MAAM,CAACnB,KAHf;AAIE,QAAA,OAAO,EAAEmB,MAAM,CAACG,OAJlB;AAKE,QAAA,SAAS,MALX;AAME,QAAA,GAAG,MANL;AAOE,QAAA,GAAG,MAPL;AAQE,QAAA,GAAG,MARL;AASE,QAAA,GAAG,EAAEF;AATP,QADF;AAaD;;AACD,wBACE,oBAAC,QAAD;AACE,MAAA,IAAI,EAAED,MAAM,CAACnB,KADf;AAEE,MAAA,OAAO,EAAEmB,MAAM,CAACG,OAFlB;AAGE,MAAA,GAAG,MAHL;AAIE,MAAA,GAAG,MAJL;AAKE,MAAA,GAAG,MALL;AAME,MAAA,GAAG,EAAEF;AANP,MADF;AAUD,GAvCA,CADH,CAPF,CADF,CADF;AAsDD,CAlFD;;AAoFA,MAAMM,QAAQ,GAAGC,SAAS,iBACxB5C,UAAU,CAAC,CAACY,KAAD,EAAQiC,KAAR,KAAkB;AAC3B,QAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BhD,KAAK,CAACiD,QAAN,CAAe,KAAf,CAAlC;AAEA9C,EAAAA,mBAAmB,CAAC2C,KAAD,EAAQ,OAAO;AAChCI,IAAAA,IAAI,EAAE,MAAM;AACVF,MAAAA,YAAY,CAAC,IAAD,CAAZ;AACD,KAH+B;AAIhCG,IAAAA,IAAI,EAAE,MAAM;AACVH,MAAAA,YAAY,CAAC,KAAD,CAAZ;AACD;AAN+B,GAAP,CAAR,CAAnB;;AASA,MAAI,CAACD,SAAL,EAAgB;AACd,WAAO,IAAP;AACD;;AACD,sBAAO,oBAAC,SAAD,EAAelC,KAAf,CAAP;AACD,CAhBS,CADZ;;AAkBA,eAAe+B,QAAQ,CAACpC,cAAc,CAACI,eAAD,EAAkBH,aAAlB,CAAf,CAAvB","sourcesContent":["import React, { forwardRef, useEffect, useImperativeHandle } from 'react'\n\nimport { Text, TouchableHighlight, View } from 'react-native'\nimport { useSpacing } from '../../hooks/useSpacing'\nimport { useTrulyNative } from '../../theming'\nimport dynamicStyles from './styles'\nimport DNButton from '../DNButton'\nimport { DNText } from '../DNText'\n\nconst DNDialogContent = props => {\n  const {\n    containerStyle,\n    titleStyle,\n    messageStyle,\n    iconStyle,\n    title,\n    message,\n    icon,\n    actions,\n    onClose,\n    styles,\n    theme,\n    appearance,\n  } = props\n\n  const spacingStyles = useSpacing(props)\n\n  const containerStyles = [\n    styles.tnDialogContainer,\n    styles.tnDialogShadow,\n    ...spacingStyles,\n    containerStyle,\n  ]\n\n  const titleStyles = [styles.tnDialogTitle, titleStyle]\n  const messageStyles = [styles.tnDialogMessage, messageStyle]\n\n  return (\n    <TouchableHighlight style={containerStyles}>\n      <View style={styles.tnDialogInnerContainer}>\n        <DNText style={titleStyles} mb8>\n          {title}\n        </DNText>\n        <DNText style={messageStyles} mb8>\n          {message}\n        </DNText>\n        <View style={styles.tnActionsContainer}>\n          {actions.map((action, index) => {\n            if (action.secondary) {\n              return (\n                <DNButton\n                  text={action.title}\n                  onPress={action.onPress}\n                  secondary\n                  ml1\n                  mr1\n                  fx1\n                  key={index}\n                />\n              )\n            }\n            if (action.destructive) {\n              return (\n                <DNButton\n                  containerStyle={styles.tnDestructiveButton}\n                  textStyle={styles.tnDestructiveButtonText}\n                  text={action.title}\n                  onPress={action.onPress}\n                  secondary\n                  ml2\n                  mr2\n                  fx1\n                  key={index}\n                />\n              )\n            }\n            return (\n              <DNButton\n                text={action.title}\n                onPress={action.onPress}\n                ml2\n                mr2\n                fx1\n                key={index}\n              />\n            )\n          })}\n        </View>\n      </View>\n    </TouchableHighlight>\n  )\n}\n\nconst DNDialog = Component =>\n  forwardRef((props, myRef) => {\n    const [isVisible, setIsVisible] = React.useState(false)\n\n    useImperativeHandle(myRef, () => ({\n      show: () => {\n        setIsVisible(true)\n      },\n      hide: () => {\n        setIsVisible(false)\n      },\n    }))\n\n    if (!isVisible) {\n      return null\n    }\n    return <Component {...props} />\n  })\nexport default DNDialog(useTrulyNative(DNDialogContent, dynamicStyles))\n"]}